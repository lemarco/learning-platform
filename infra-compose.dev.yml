version: "3.9"

services:
  reverse_proxy:
    container_name: reverse_proxy
    restart: always
    image: nginx:1.25.2-alpine
    volumes:
      - ${PWD}/configs/nginx/nginx.dev.server.conf.template:/etc/nginx/templates/nginx.dev.server.conf.template:rw,cached
      - ${PWD}/configs/nginx/nginx.dev.http.conf:/etc/nginx/nginx.conf
      - ${PWD}/logs/nginx/:/var/log/nginx
    ports:
      - "80:80"
    env_file:
      - .env

  users_events_db:
    container_name: users_events_db
    restart: always
    image: postgres:16.1-alpine

    environment:
      POSTGRES_HOST: ${USERS_EVENTS_DB_HOST}
      POSTGRES_PASSWORD: ${USERS_EVENTS_DB_PASSWORD}
      POSTGRES_DB: ${USERS_EVENTS_DB_NAME}
      POSTGRES_USER: ${USERS_EVENTS_DB_USER}
      POSTGRES_PORT: 5432
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${USERS_EVENTS_DB_PORT}:5432"
    env_file:
      - .env
    volumes:
      - ${PWD}/data/users_events_db/:/var/lib/postgresql/data

  users_read_db:
    container_name: users_read_db
    restart: always
    image: postgres:16.1-alpine

    environment:
      POSTGRES_HOST: ${USERS_READ_DB_HOST}
      POSTGRES_PASSWORD: ${USERS_READ_DB_PASSWORD}
      POSTGRES_DB: ${USERS_READ_DB_NAME}
      POSTGRES_USER: ${USERS_READ_DB_USER}
      POSTGRES_PORT: 5432
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${USERS_READ_DB_PORT}:5432"
    env_file:
      - .env
    volumes:
      - ${PWD}/data/users_read_db/:/var/lib/postgresql/data

  auth_events_db:
    container_name: auth_events_db
    restart: always
    image: postgres:16.1-alpine

    environment:
      POSTGRES_HOST: ${AUTH_EVENTS_DB_HOST}
      POSTGRES_PASSWORD: ${AUTH_EVENTS_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_EVENTS_DB_NAME}
      POSTGRES_USER: ${AUTH_EVENTS_DB_USER}
      POSTGRES_PORT: 5432
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${AUTH_EVENTS_DB_PORT}:5432"
    env_file:
      - .env
    volumes:
      - ${PWD}/data/auth_events_db/:/var/lib/postgresql/data

  auth_token_store:
    image: "redis:alpine"
    container_name: auth_token_store
    ports:
      - "${AUTH_TOKEN_STORE_PORT}:6379"
    env_file:
      - .env
    volumes:
      - ${PWD}/data/auth_token_store/:/data

  auth_read_db:
    container_name: auth_read_db
    restart: always
    image: postgres:16.1-alpine

    environment:
      POSTGRES_HOST: ${AUTH_READ_DB_HOST}
      POSTGRES_PASSWORD: ${AUTH_READ_DB_PASSWORD}
      POSTGRES_DB: ${AUTH_READ_DB_NAME}
      POSTGRES_USER: ${AUTH_READ_DB_USER}
      POSTGRES_PORT: 5432
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${AUTH_READ_DB_PORT}:5432"
    env_file:
      - .env
    volumes:
      - ${PWD}/data/auth_read_db/:/var/lib/postgresql/data

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - ${PWD}/data/zookeeper/:/var/lib/zookeeper/data
      - ${PWD}/logs/zookeeper/:/var/lib/zookeeper/log
      - ${PWD}/configs/kafka:/etc/zookeeper/conf

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    volumes:
      - ${PWD}/data/kafka/:/var/lib/kafka/data

  ####################### SETUP #######################
  setup:
    build:
      context: ./configs/elk-setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./configs/elk-setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./configs/elk-setup/helpers.sh:/helpers.sh:ro,Z
      - ./configs/elk-setup/roles:/roles:ro,Z
      - ./configs/elk-setup/:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}

    depends_on:
      - elasticsearch
    env_file:
      - .env
  ###################### ELK #######################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: elasticsearch
    volumes:
      - ./configs/elasticsearch/config.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - ./data/elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      discovery.type: single-node
    restart: unless-stopped
    env_file:
      - .env
  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    mem_limit: 2g
    volumes:
      - ./configs/kibana/config.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      - ./data/elasticsearch:/usr/share/kibana/data:Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    env_file:
      - .env

  filebeat:
    image: elastic/filebeat:${ELASTIC_VERSION}

    command:
      - -e
      - --strict.perms=false
    volumes:
      - ./configs/filebeat/config.yml:/usr/share/filebeat/filebeat.yml
      - ./logs/filebeat/:/var/log/filebeat/service:ro
      - ./logs:/var/log/filebeat
      - ./logs/seervices/:/app:ro

    environment:
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    env_file:
      - .env
